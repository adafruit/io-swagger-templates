#!/usr/bin/env node

var spawn = require('child_process').spawn,
    fs = require('fs'),
    path = require('path'),
    logo = fs.readFileSync(path.join(__dirname,'logo.txt'), 'utf8'),
    server = require('commander'),
    package = require('./package.json');

var command = process.platform === 'win32' ? 'forever.cmd' : 'forever';
server._name = 'adafruit-io server';

function start() {

  process.env.AIO_PORT = server.port || 8080;
  process.stdout.write(logo);
  console.log('[status]  starting server...');

  var child = spawn(command, ['start', '-s', 'index.js'], {
    cwd: __dirname,
    env: process.env,
    detached: true
  });

  console.log('[status]  adafruit io is now ready at http://localhost:%d/api', process.env.AIO_PORT);
  console.log('[info]    documentation is available at http://localhost:%d/api/docs\n', process.env.AIO_PORT);

  child.on('error', console.log);

}

function restart() {

  var child = spawn(command, ['restart', 'index.js'], {
    cwd: __dirname,
    env: process.env,
    detached: true
  });

  console.log('[status] restarting server...\n');

  child.on('error', console.log);

}

function stop() {

  var child = spawn(command, ['stop', 'index.js'], {
    cwd: __dirname,
    env: process.env,
    detached: true
  });

  console.log('[status] stopping server...\n');

  child.on('error', console.log);

}

server.version(package.version);
server.option('-p, --port <n>', 'http port', parseInt);
server.command('start').description('starts the server').action(start);
server.command('restart').description('restarts the server').action(restart);
server.command('stop').description('stops the server').action(stop);
server.parse(process.argv);

if (!process.argv.slice(2).length)
  service.outputHelp();


